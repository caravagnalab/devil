[{"path":"https://caravagnalab.github.io/devil/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2024 anRpackage authors Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://caravagnalab.github.io/devil/articles/getStarted.html","id":"overview","dir":"Articles","previous_headings":"","what":"Overview","title":"Get started","text":"tutorial walks minimal, end--end workflow differential expression (DE) devil public scRNA-seq dataset. : (1) load data, (2) filter cells/genes, (3) build design, (4) fit model, (5) specify contrasts, (6) visualize results. study multiple patients/donors, devil can compute clustered (patient-aware) standard errors via cluster argument.","code":""},{"path":"https://caravagnalab.github.io/devil/articles/getStarted.html","id":"prerequisites","dir":"Articles","previous_headings":"","what":"Prerequisites","title":"Get started","text":"","code":"# If needed: # install.packages(\"BiocManager\") # BiocManager::install(c(\"scRNAseq\",\"SingleCellExperiment\"))  library(devil) library(scRNAseq) library(SingleCellExperiment) library(SummarizedExperiment) library(Matrix) library(dplyr)"},{"path":"https://caravagnalab.github.io/devil/articles/getStarted.html","id":"load-and-inspect-data","dir":"Articles","previous_headings":"","what":"Load and inspect data","title":"Get started","text":"’ll use Baron pancreas dataset scRNAseq. Extract counts metadata using accessors: Tip: patient/donor column (often donor patient), keep , ’ll optionally pass cluste= later.","code":"sce <- scRNAseq::BaronPancreasData()  # SingleCellExperiment sce #> class: SingleCellExperiment  #> dim: 20125 8569  #> metadata(0): #> assays(1): counts #> rownames(20125): A1BG A1CF ... ZZZ3 pk #> rowData names(0): #> colnames(8569): human1_lib1.final_cell_0001 human1_lib1.final_cell_0002 #>   ... human4_lib3.final_cell_0700 human4_lib3.final_cell_0701 #> colData names(2): donor label #> reducedDimNames(0): #> mainExpName: NULL #> altExpNames(0): counts <- SummarizedExperiment::assay(sce, \"counts\") meta   <- as.data.frame(SummarizedExperiment::colData(sce))  cat(\"Genes:\", nrow(counts), \"\\nCells:\", ncol(counts), \"\\n\") #> Genes: 20125  #> Cells: 8569 stopifnot(\"label\" %in% colnames(meta)) head(meta$label) #> [1] \"acinar\" \"acinar\" \"acinar\" \"acinar\" \"acinar\" \"acinar\""},{"path":"https://caravagnalab.github.io/devil/articles/getStarted.html","id":"light-filtering","dir":"Articles","previous_headings":"","what":"Light filtering","title":"Get started","text":"Keep three abundant cell types; filter lowly expressed genes. Optionally restrict highly expressed genes faster demo (skip real analyses):","code":"# keep 3 largest cell types top3 <- names(sort(table(meta$label), decreasing = TRUE))[1:3] keep_cells <- meta$label %in% top3 counts <- counts[, keep_cells, drop = FALSE] meta   <- meta[ keep_cells, , drop = FALSE]  # gene filter: expressed (>=1 UMI) in >= 1% of kept cells min_cells <- max(1, floor(0.01 * ncol(counts))) keep_genes <- Matrix::rowSums(counts >= 1) >= min_cells counts <- counts[keep_genes, , drop = FALSE]  cat(\"After filtering — Genes:\", nrow(counts), \"Cells:\", ncol(counts), \"\\n\") #> After filtering — Genes: 11951 Cells: 5928 table(meta$label) #>  #>  alpha   beta ductal  #>   2326   2525   1077 # demo mode: top 3000 genes by total counts if (nrow(counts) > 3000) {   ord <- order(Matrix::rowSums(counts), decreasing = TRUE)   counts <- counts[ord[seq_len(3000)], ] }"},{"path":"https://caravagnalab.github.io/devil/articles/getStarted.html","id":"design-matrix","dir":"Articles","previous_headings":"","what":"Design matrix","title":"Get started","text":"Build -intercept design coefficient corresponds cell type. (Optional) Cluster variable patient-aware SEs, available:","code":"meta$label <- droplevels(factor(meta$label)) design <- model.matrix(~ 0 + label, data = meta) colnames(design) <- gsub(\"^label\", \"\", colnames(design)) colnames(design) #> [1] \"alpha\"  \"beta\"   \"ductal\" cluster <- NULL if (\"donor\" %in% names(meta))   cluster <- factor(meta$donor) if (is.null(cluster) && \"patient\" %in% names(meta)) cluster <- factor(meta$patient)"},{"path":"https://caravagnalab.github.io/devil/articles/getStarted.html","id":"fit-the-model","dir":"Articles","previous_headings":"","what":"Fit the model","title":"Get started","text":"fit_devil() expects counts matrix (genes × cells), design (cells × covariates). parameters size_factors=TRUE computes internally size factor scale expression based library size cell.","code":"fit <- devil::fit_devil(   input_matrix        = as.matrix(counts),   design_matrix       = design,   overdispersion      = TRUE,   offset              = 1e-6,   size_factors        = TRUE,   parallel.cores      = 1,   verbose             = TRUE )"},{"path":"https://caravagnalab.github.io/devil/articles/getStarted.html","id":"specify-contrasts","dir":"Articles","previous_headings":"","what":"Specify contrasts","title":"Get started","text":"-intercept design, column cell-type mean log scale. test “beta vs ductal”, define contrast (+1 * beta) + (-1 * ductal) zero elsewhere. labels differ, update /accordingly—use colnames(design) see available levels.","code":"make_contrast <- function(design, from, to) {   stopifnot(from %in% colnames(design), to %in% colnames(design))   c <- rep(0, ncol(design)); names(c) <- colnames(design)   c[from] <-  1   c[to]   <- -1   as.numeric(c) }  contrast <- make_contrast(design, from = \"beta\", to = \"ductal\") contrast #> [1]  0  1 -1"},{"path":"https://caravagnalab.github.io/devil/articles/getStarted.html","id":"test-for-differential-expression","dir":"Articles","previous_headings":"","what":"Test for differential expression","title":"Get started","text":"Run Wald test optional clustered SEs cluster exists. Quick peek top hits:","code":"test <- devil::test_de(   fit,   contrast = contrast,   max_lfc  = 20,      # Cap extreme fold changes   cluster  = cluster  # NULL if not present; enables patient-aware SE if provided )  # Add gene names if missing if (!(\"name\" %in% colnames(test))) {   if (!is.null(rownames(counts))) {     test$name <- rownames(counts)   } else {     test$name <- as.character(seq_len(nrow(test)))   } } test %>%   arrange(adj_pval, desc(abs(lfc))) %>%   select(name, lfc, pval, adj_pval) %>%   head(10) #> # A tibble: 10 × 4 #>    name     lfc      pval  adj_pval #>    <chr>  <dbl>     <dbl>     <dbl> #>  1 CCL2   -9.47 0         0         #>  2 TFPI2  -7.66 0         0         #>  3 G6PC2   5.94 0         0         #>  4 CPE     4.59 0         0         #>  5 RBM47  -1.44 0         0         #>  6 PGLS   -1.34 0         0         #>  7 SSNA1  -1.11 0         0         #>  8 DAZAP2 -1.32 1.98e-323 7.41e-321 #>  9 SPINT1 -3.12 3.13e-314 1.04e-311 #> 10 GJD2    6.10 1.24e-307 3.72e-305"},{"path":"https://caravagnalab.github.io/devil/articles/getStarted.html","id":"visualize-results","dir":"Articles","previous_headings":"","what":"Visualize results","title":"Get started","text":"Volcano plot DE genes","code":"devil::plot_volcano(   test,   lfc_cut    = 1,   pval_cut   = 0.05,   labels     = TRUE,   point_size = 1.8,    title = \"beta vs ductal\" )"},{"path":"https://caravagnalab.github.io/devil/articles/getStarted.html","id":"notes-tips","dir":"Articles","previous_headings":"","what":"Notes & tips","title":"Get started","text":"Designs covariates. -intercept designs (~ 0 + label) make contrasts intuitive aren’t always necessary. can obviously add covariates (e.g., age, sex). Keep cluster = donor valid patient-level uncertainty. Multiple testing Use adj_pval (FDR-corrected) rather raw p-values significance calls. Speed. large datasets, run GPU available. Interpretation. lfc log2 scale. lfc = 1 means 2-fold higher expression.","code":""},{"path":"https://caravagnalab.github.io/devil/articles/getStarted.html","id":"session-info","dir":"Articles","previous_headings":"","what":"Session info","title":"Get started","text":"","code":"sessionInfo() #> R version 4.5.1 (2025-06-13) #> Platform: x86_64-pc-linux-gnu #> Running under: Ubuntu 24.04.2 LTS #>  #> Matrix products: default #> BLAS:   /usr/lib/x86_64-linux-gnu/openblas-pthread/libblas.so.3  #> LAPACK: /usr/lib/x86_64-linux-gnu/openblas-pthread/libopenblasp-r0.3.26.so;  LAPACK version 3.12.0 #>  #> locale: #>  [1] LC_CTYPE=C.UTF-8       LC_NUMERIC=C           LC_TIME=C.UTF-8        #>  [4] LC_COLLATE=C.UTF-8     LC_MONETARY=C.UTF-8    LC_MESSAGES=C.UTF-8    #>  [7] LC_PAPER=C.UTF-8       LC_NAME=C              LC_ADDRESS=C           #> [10] LC_TELEPHONE=C         LC_MEASUREMENT=C.UTF-8 LC_IDENTIFICATION=C    #>  #> time zone: UTC #> tzcode source: system (glibc) #>  #> attached base packages: #> [1] stats4    stats     graphics  grDevices utils     datasets  methods   #> [8] base      #>  #> other attached packages: #>  [1] dplyr_1.1.4                 Matrix_1.7-3                #>  [3] scRNAseq_2.22.0             SingleCellExperiment_1.30.1 #>  [5] SummarizedExperiment_1.38.1 Biobase_2.68.0              #>  [7] GenomicRanges_1.60.0        GenomeInfoDb_1.44.1         #>  [9] IRanges_2.42.0              S4Vectors_0.46.0            #> [11] BiocGenerics_0.54.0         generics_0.1.4              #> [13] MatrixGenerics_1.20.0       matrixStats_1.5.0           #> [15] devil_0.1.0                 #>  #> loaded via a namespace (and not attached): #>   [1] DBI_1.2.3                 bitops_1.0-9              #>   [3] httr2_1.2.1               rlang_1.1.6               #>   [5] magrittr_2.0.3            gypsum_1.4.0              #>   [7] compiler_4.5.1            RSQLite_2.4.2             #>   [9] DelayedMatrixStats_1.30.0 GenomicFeatures_1.60.0    #>  [11] png_0.1-8                 systemfonts_1.2.3         #>  [13] vctrs_0.6.5               ProtGenerics_1.40.0       #>  [15] pkgconfig_2.0.3           crayon_1.5.3              #>  [17] fastmap_1.2.0             dbplyr_2.5.0              #>  [19] XVector_0.48.0            labeling_0.4.3            #>  [21] utf8_1.2.6                Rsamtools_2.24.0          #>  [23] rmarkdown_2.29            UCSC.utils_1.4.0          #>  [25] ragg_1.4.0                bit_4.6.0                 #>  [27] xfun_0.53                 cachem_1.1.0              #>  [29] jsonlite_2.0.0            blob_1.2.4                #>  [31] rhdf5filters_1.20.0       DelayedArray_0.34.1       #>  [33] Rhdf5lib_1.30.0           BiocParallel_1.42.1       #>  [35] parallel_4.5.1            R6_2.6.1                  #>  [37] RColorBrewer_1.1-3        bslib_0.9.0               #>  [39] rtracklayer_1.68.0        jquerylib_0.1.4           #>  [41] Rcpp_1.1.0                knitr_1.50                #>  [43] tidyselect_1.2.1          abind_1.4-8               #>  [45] yaml_2.3.10               codetools_0.2-20          #>  [47] curl_6.4.0                lattice_0.22-7            #>  [49] alabaster.sce_1.8.0       tibble_3.3.0              #>  [51] withr_3.0.2               KEGGREST_1.48.1           #>  [53] evaluate_1.0.4            desc_1.4.3                #>  [55] BiocFileCache_2.16.1      alabaster.schemas_1.8.0   #>  [57] ExperimentHub_2.16.1      Biostrings_2.76.0         #>  [59] pillar_1.11.0             BiocManager_1.30.26       #>  [61] filelock_1.0.3            RCurl_1.98-1.17           #>  [63] ggplot2_3.5.2             BiocVersion_3.21.1        #>  [65] ensembldb_2.32.0          scales_1.4.0              #>  [67] sparseMatrixStats_1.20.0  alabaster.base_1.8.1      #>  [69] alabaster.ranges_1.8.0    glue_1.8.0                #>  [71] alabaster.matrix_1.8.0    lazyeval_0.2.2            #>  [73] tools_4.5.1               AnnotationHub_3.16.1      #>  [75] BiocIO_1.18.0             GenomicAlignments_1.44.0  #>  [77] fs_1.6.6                  XML_3.99-0.18             #>  [79] rhdf5_2.52.1              grid_4.5.1                #>  [81] AnnotationDbi_1.70.0      GenomeInfoDbData_1.2.14   #>  [83] HDF5Array_1.36.0          restfulr_0.0.16           #>  [85] cli_3.6.5                 rappdirs_0.3.3            #>  [87] textshaping_1.0.1         S4Arrays_1.8.1            #>  [89] AnnotationFilter_1.32.0   gtable_0.3.6              #>  [91] alabaster.se_1.8.0        sass_0.4.10               #>  [93] digest_0.6.37             SparseArray_1.8.1         #>  [95] farver_2.1.2              rjson_0.2.23              #>  [97] memoise_2.0.1             htmltools_0.5.8.1         #>  [99] pkgdown_2.1.3             lifecycle_1.0.4           #> [101] h5mread_1.0.1             httr_1.4.7                #> [103] bit64_4.6.0-1"},{"path":"https://caravagnalab.github.io/devil/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Giovanni Santacatterina. Author, maintainer.","code":""},{"path":"https://caravagnalab.github.io/devil/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Santacatterina G (2025). devil: devil. R package version 0.1.0, https://caravagnalab.github.io/devil/.","code":"@Manual{,   title = {devil: devil},   author = {Giovanni Santacatterina},   year = {2025},   note = {R package version 0.1.0},   url = {https://caravagnalab.github.io/devil/}, }"},{"path":"https://caravagnalab.github.io/devil/index.html","id":"devil-","dir":"","previous_headings":"","what":"devil","title":"devil","text":"devil R package differential expression analysis single-cell RNA sequencing (scRNA-seq) data. supports single- multi-patient experimental designs, implementing robust statistical methods identify differentially expressed genes accounting technical biological variability. Key features : Flexible experimental design support (single/multiple patients) Robust statistical testing framework Efficient implementation large-scale datasets","code":""},{"path":"https://caravagnalab.github.io/devil/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"devil","text":"can install current version devil GitHub : CUDA implementation , today, devel branch. Similary, Python implementation (GPU support), python branch.","code":"devtools::install_github(\"caravagnalab/devil\")"},{"path":"https://caravagnalab.github.io/devil/index.html","id":"example","dir":"","previous_headings":"","what":"Example","title":"devil","text":"basic example shows fit expression single gene observed 1000 cells.","code":"library(devil) y <- t(as.matrix(rnbinom(1000, 1, .1))) fit <- devil::fit_devil(input_matrix=y, design_matrix=matrix(1, ncol = 1, nrow = 1000), verbose=T, size_factors=T, overdispersion = T) #> Compute size factors #> Initialize beta estimate #> Fit beta coefficients #> Fit overdispersion test <- devil::test_de(fit, c(1))"},{"path":"https://caravagnalab.github.io/devil/index.html","id":"copyright-and-contacts","dir":"","previous_headings":"Example","what":"Copyright and contacts","title":"devil","text":"Giulio Caravagna, Giovanni Santacatterina. Cancer Data Science (CDS) Laboratory.","code":""},{"path":"https://caravagnalab.github.io/devil/reference/calculate_sf.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate Size Factors for Count Data Normalization — calculate_sf","title":"Calculate Size Factors for Count Data Normalization — calculate_sf","text":"Computes normalization factors count data, handling edge cases like -zero columns. Uses geometric mean normalization approach.","code":""},{"path":"https://caravagnalab.github.io/devil/reference/calculate_sf.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate Size Factors for Count Data Normalization — calculate_sf","text":"","code":"calculate_sf(Y, verbose = FALSE)"},{"path":"https://caravagnalab.github.io/devil/reference/calculate_sf.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate Size Factors for Count Data Normalization — calculate_sf","text":"Y Count data matrix genes rows samples columns verbose Logical indicating whether print progress messages","code":""},{"path":"https://caravagnalab.github.io/devil/reference/calculate_sf.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate Size Factors for Count Data Normalization — calculate_sf","text":"Vector size factors, one per sample","code":""},{"path":"https://caravagnalab.github.io/devil/reference/compute_offset_vector.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute Offset Matrix for Statistical Model — compute_offset_vector","title":"Compute Offset Matrix for Statistical Model — compute_offset_vector","text":"Creates offset matrix incorporating base offsets optional size factors model fitting.","code":""},{"path":"https://caravagnalab.github.io/devil/reference/compute_offset_vector.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute Offset Matrix for Statistical Model — compute_offset_vector","text":"","code":"compute_offset_vector(off, Y, size_factors)"},{"path":"https://caravagnalab.github.io/devil/reference/compute_offset_vector.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute Offset Matrix for Statistical Model — compute_offset_vector","text":"Base offset value Y Count data matrix genes rows samples columns size_factors Optional vector size factors normalization","code":""},{"path":"https://caravagnalab.github.io/devil/reference/compute_offset_vector.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute Offset Matrix for Statistical Model — compute_offset_vector","text":"Matrix offset values gene-sample combination","code":""},{"path":"https://caravagnalab.github.io/devil/reference/compute_sandwich.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute Sandwich Estimator for Statistical Model — compute_sandwich","title":"Compute Sandwich Estimator for Statistical Model — compute_sandwich","text":"Calculates sandwich estimator robust covariance estimation, particularly useful clustered heteroskedastic data scenarios.","code":""},{"path":"https://caravagnalab.github.io/devil/reference/compute_sandwich.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute Sandwich Estimator for Statistical Model — compute_sandwich","text":"","code":"compute_sandwich(   design_matrix,   y,   beta,   overdispersion,   size_factors,   clusters )"},{"path":"https://caravagnalab.github.io/devil/reference/compute_sandwich.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute Sandwich Estimator for Statistical Model — compute_sandwich","text":"design_matrix Matrix predictor variables y Vector response variables beta Vector coefficient estimates overdispersion Scalar overdispersion parameter size_factors Vector normalization factors sample clusters Vector indicating cluster membership","code":""},{"path":"https://caravagnalab.github.io/devil/reference/compute_sandwich.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute Sandwich Estimator for Statistical Model — compute_sandwich","text":"Matrix containing sandwich estimator","code":""},{"path":"https://caravagnalab.github.io/devil/reference/devil-package.html","id":null,"dir":"Reference","previous_headings":"","what":"devil: devil — devil-package","title":"devil: devil — devil-package","text":"R package perform fast scalable single cell differential expression analysis.","code":""},{"path":[]},{"path":"https://caravagnalab.github.io/devil/reference/devil-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"devil: devil — devil-package","text":"Maintainer: Giovanni Santacatterina santacatterinagiovanni@gmail.com","code":""},{"path":"https://caravagnalab.github.io/devil/reference/estimate_dispersion.html","id":null,"dir":"Reference","previous_headings":"","what":"Estimate Dispersion Parameters for Count Matrix — estimate_dispersion","title":"Estimate Dispersion Parameters for Count Matrix — estimate_dispersion","text":"Calculates per-gene dispersion estimates count matrix using method moments approach. Handles edge cases setting default high dispersion value.","code":""},{"path":"https://caravagnalab.github.io/devil/reference/estimate_dispersion.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Estimate Dispersion Parameters for Count Matrix — estimate_dispersion","text":"","code":"estimate_dispersion(count_matrix, offset_vector)"},{"path":"https://caravagnalab.github.io/devil/reference/estimate_dispersion.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Estimate Dispersion Parameters for Count Matrix — estimate_dispersion","text":"count_matrix Matrix count data genes rows samples columns offset_vector Vector offset values normalization","code":""},{"path":"https://caravagnalab.github.io/devil/reference/estimate_dispersion.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Estimate Dispersion Parameters for Count Matrix — estimate_dispersion","text":"Vector dispersion estimates, one per gene","code":""},{"path":"https://caravagnalab.github.io/devil/reference/fit_devil.html","id":null,"dir":"Reference","previous_headings":"","what":"Fit Statistical Model for Count Data — fit_devil","title":"Fit Statistical Model for Count Data — fit_devil","text":"Fits statistical model count data, particularly designed RNA sequencing data analysis. function estimates multiple parameters including regression coefficients (beta), overdispersion parameters, normalizes data using size factors. supports CPU GPU-based computation parallel processing capabilities.","code":""},{"path":"https://caravagnalab.github.io/devil/reference/fit_devil.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Fit Statistical Model for Count Data — fit_devil","text":"","code":"fit_devil(   input_matrix,   design_matrix,   overdispersion = TRUE,   init_overdispersion = NULL,   do_cox_reid_adjustment = TRUE,   offset = 1e-06,   size_factors = TRUE,   verbose = FALSE,   max_iter = 100,   tolerance = 0.001,   CUDA = FALSE,   batch_size = 1024L,   parallel.cores = NULL )"},{"path":"https://caravagnalab.github.io/devil/reference/fit_devil.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Fit Statistical Model for Count Data — fit_devil","text":"input_matrix numeric matrix count data (genes × samples). Rows represent genes/features, columns represent samples/cells. design_matrix numeric matrix predictor variables (samples × predictors). row corresponds sample, column predictor variable. overdispersion Logical. Whether estimate overdispersion parameter. Set FALSE Poisson regression. Default: TRUE init_overdispersion Numeric NULL. Initial value overdispersion parameter. NULL, estimates initial value data. Recommended value specified: 100. Default: NULL do_cox_reid_adjustment Logical. Whether apply Cox-Reid adjustment overdispersion estimation. Default: TRUE offset Numeric. Value added counts avoid numerical issues zero counts. Default: 1e-6 size_factors Logical. Whether compute normalization factors different sequencing depths. Default: TRUE verbose Logical. Whether print progress messages execution. Default: FALSE max_iter Integer. Maximum number iterations parameter optimization. Default: 100 tolerance Numeric. Convergence criterion parameter optimization. Default: 1e-3 CUDA Logical. Whether use GPU acceleration (requires CUDA support). Default: FALSE batch_size Integer. Number genes process per batch GPU mode. relevant CUDA = TRUE. Default: 1024 parallel.cores Integer NULL. Number CPU cores parallel processing. NULL, uses available cores. Default: NULL","code":""},{"path":"https://caravagnalab.github.io/devil/reference/fit_devil.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Fit Statistical Model for Count Data — fit_devil","text":"list containing: beta Matrix fitted coefficients (genes × predictors) overdispersion Vector fitted overdispersion parameters (one per gene) iterations Vector iteration counts convergence (one per gene) size_factors Vector computed size factors (one per sample) offset_vector Vector offset values used model design_matrix Input design matrix (provided) input_matrix Input count matrix (provided) input_parameters List used parameter values (max_iter, tolerance, parallel.cores)","code":""},{"path":"https://caravagnalab.github.io/devil/reference/fit_devil.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Fit Statistical Model for Count Data — fit_devil","text":"function implements negative binomial regression model following steps: Computes size factors data normalization (requested) Initializes model parameters including beta coefficients overdispersion Fits model using either CPU (parallel) GPU computation Optionally estimates overdispersion parameters model fitting process uses iterative optimization configurable convergence criteria maximum iterations. large datasets, GPU implementation processes genes batches improved memory efficiency.","code":""},{"path":"https://caravagnalab.github.io/devil/reference/fit_devil.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Fit Statistical Model for Count Data — fit_devil","text":"","code":"if (FALSE) { # \\dontrun{ # Basic usage with default parameters fit <- fit_devil(counts, design)  # Using GPU acceleration with custom batch size fit <- fit_devil(counts, design, CUDA = TRUE, batch_size = 2048)  # Disable overdispersion estimation (Poisson model) fit <- fit_devil(counts, design, overdispersion = FALSE) } # }"},{"path":"https://caravagnalab.github.io/devil/reference/fit_dispersion.html","id":null,"dir":"Reference","previous_headings":"","what":"Fit Dispersion Parameter for Negative Binomial Model — fit_dispersion","title":"Fit Dispersion Parameter for Negative Binomial Model — fit_dispersion","text":"Estimates dispersion parameter negative binomial GLM using maximum likelihood estimation. Implementation glmGamPoi package.","code":""},{"path":"https://caravagnalab.github.io/devil/reference/fit_dispersion.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Fit Dispersion Parameter for Negative Binomial Model — fit_dispersion","text":"","code":"fit_dispersion(   beta,   model_matrix,   y,   offset_matrix,   tolerance,   max_iter,   do_cox_reid_adjustment = TRUE )"},{"path":"https://caravagnalab.github.io/devil/reference/fit_dispersion.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Fit Dispersion Parameter for Negative Binomial Model — fit_dispersion","text":"beta Vector coefficient estimates model_matrix Design matrix predictor variables y Vector response variables (counts) offset_matrix Matrix offset values tolerance Convergence tolerance optimization max_iter Maximum number iterations optimization do_cox_reid_adjustment Logical indicating whether apply Cox-Reid adjustment","code":""},{"path":"https://caravagnalab.github.io/devil/reference/fit_dispersion.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Fit Dispersion Parameter for Negative Binomial Model — fit_dispersion","text":"Estimated dispersion parameter","code":""},{"path":"https://caravagnalab.github.io/devil/reference/fit_dispersion.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Fit Dispersion Parameter for Negative Binomial Model — fit_dispersion","text":"implementation comes glmGamPoi package: https://github.com/const-ae/glmGamPoi Original publication: Ahlmann-Eltze, C., Huber, W. (2020). glmGamPoi: Fitting Gamma-Poisson Generalized Linear Models Single Cell Count Data. Bioinformatics. https://doi.org/10.1093/bioinformatics/btaa1009","code":""},{"path":"https://caravagnalab.github.io/devil/reference/init_beta.html","id":null,"dir":"Reference","previous_headings":"","what":"Initialize Beta Coefficients Using Design Matrix — init_beta","title":"Initialize Beta Coefficients Using Design Matrix — init_beta","text":"Initializes regression coefficients using QR decomposition design matrix normalized log counts.","code":""},{"path":"https://caravagnalab.github.io/devil/reference/init_beta.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Initialize Beta Coefficients Using Design Matrix — init_beta","text":"","code":"init_beta(y, design_matrix, offset_matrix)"},{"path":"https://caravagnalab.github.io/devil/reference/init_beta.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Initialize Beta Coefficients Using Design Matrix — init_beta","text":"y Count data matrix design_matrix Matrix predictor variables offset_matrix Matrix offset values","code":""},{"path":"https://caravagnalab.github.io/devil/reference/init_beta.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Initialize Beta Coefficients Using Design Matrix — init_beta","text":"Matrix initial beta coefficients","code":""},{"path":"https://caravagnalab.github.io/devil/reference/init_beta_groups.html","id":null,"dir":"Reference","previous_headings":"","what":"Initialize Beta Coefficients Using Groups — init_beta_groups","title":"Initialize Beta Coefficients Using Groups — init_beta_groups","text":"Initializes regression coefficients based group-wise means normalized counts.","code":""},{"path":"https://caravagnalab.github.io/devil/reference/init_beta_groups.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Initialize Beta Coefficients Using Groups — init_beta_groups","text":"","code":"init_beta_groups(y, groups, offset_matrix)"},{"path":"https://caravagnalab.github.io/devil/reference/init_beta_groups.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Initialize Beta Coefficients Using Groups — init_beta_groups","text":"y Count data matrix groups Vector indicating group membership offset_matrix Matrix offset values","code":""},{"path":"https://caravagnalab.github.io/devil/reference/init_beta_groups.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Initialize Beta Coefficients Using Groups — init_beta_groups","text":"Matrix initial beta coefficients group","code":""},{"path":"https://caravagnalab.github.io/devil/reference/plot_volcano.html","id":null,"dir":"Reference","previous_headings":"","what":"Create Volcano Plot for Differential Expression Results — plot_volcano","title":"Create Volcano Plot for Differential Expression Results — plot_volcano","text":"Generates customizable volcano plot visualizing differential expression results, highlighting significant genes based fold change statistical significance. plot supports various customization options including color schemes, point sizes, gene labeling.","code":""},{"path":"https://caravagnalab.github.io/devil/reference/plot_volcano.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create Volcano Plot for Differential Expression Results — plot_volcano","text":"","code":"plot_volcano(   devil.res,   lfc_cut = 1,   pval_cut = 0.05,   labels = TRUE,   colors = c(\"gray\", \"forestgreen\", \"steelblue\", \"indianred\"),   color_alpha = 0.7,   point_size = 1,   center = TRUE,   title = \"Volcano plot\" )"},{"path":"https://caravagnalab.github.io/devil/reference/plot_volcano.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create Volcano Plot for Differential Expression Results — plot_volcano","text":"devil.res tibble test_de() containing columns: name: Gene identifiers adj_pval: Adjusted p-values lfc: Log2 fold changes lfc_cut Numeric. Absolute log2 fold change threshold significance. Default: 1 pval_cut Numeric. Adjusted p-value threshold significance. Default: 0.05 labels Logical. Whether label genes meeting significance criteria. Default: TRUE colors Character vector length 4 specifying colors : Non-significant genes Fold-change significant P-value significant significant Default: c(\"gray\", \"forestgreen\", \"steelblue\", \"indianred\") color_alpha Numeric 0 1. Transparency level points. Default: 0.7 point_size Numeric. Size plotting points. Default: 1 center Logical. Whether center x-axis zero. Default: TRUE title Character. Plot title. Default: \"Volcano plot\"","code":""},{"path":"https://caravagnalab.github.io/devil/reference/plot_volcano.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create Volcano Plot for Differential Expression Results — plot_volcano","text":"ggplot2 object containing volcano plot.","code":""},{"path":"https://caravagnalab.github.io/devil/reference/plot_volcano.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Create Volcano Plot for Differential Expression Results — plot_volcano","text":"function creates scatter plot : X-axis: Log2 fold change Y-axis: -Log10 adjusted p-value Points colored based significance categories: Non-significant: Neither p-value fold change threshold met LFC significant: fold change threshold met P-value significant: p-value threshold met significant: thresholds met plot includes dashed lines indicating significance thresholds optionally labels genes meeting significance criteria.","code":""},{"path":"https://caravagnalab.github.io/devil/reference/plot_volcano.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Create Volcano Plot for Differential Expression Results — plot_volcano","text":"Genes adj_pval = 0 assigned smallest non-zero p-value dataset NA values removed warning Gene labels placed overlap prevention","code":""},{"path":"https://caravagnalab.github.io/devil/reference/plot_volcano.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create Volcano Plot for Differential Expression Results — plot_volcano","text":"","code":"if (FALSE) { # \\dontrun{ # Basic volcano plot plot_volcano(de_results)  # Custom thresholds and colors plot_volcano(de_results,             lfc_cut = 2,             pval_cut = 0.01,             colors = c(\"grey80\", \"blue\", \"green\", \"red\"))  # Without gene labels plot_volcano(de_results, labels = FALSE) } # }"},{"path":"https://caravagnalab.github.io/devil/reference/test_de.html","id":null,"dir":"Reference","previous_headings":"","what":"Test for Differential Expression — test_de","title":"Test for Differential Expression — test_de","text":"Performs statistical testing differential expression using results fitted devil model. Supports standard robust (clustered) variance estimation, multiple testing correction customizable fold change thresholds.","code":""},{"path":"https://caravagnalab.github.io/devil/reference/test_de.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Test for Differential Expression — test_de","text":"","code":"test_de(   devil.fit,   contrast,   pval_adjust_method = \"BH\",   max_lfc = 10,   clusters = NULL,   parallel.cores = NULL )"},{"path":"https://caravagnalab.github.io/devil/reference/test_de.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Test for Differential Expression — test_de","text":"devil.fit fitted model object fit_devil(). Must contain beta coefficients, design matrix, overdispersion parameters. contrast Numeric vector matrix specifying comparison interest. Length must match number coefficients model. example, c(0, 1, -1) tests difference second third coefficient. pval_adjust_method Character. Method p-value adjustment. Passed stats::p.adjust(). Common choices: \"BH\": Benjamini-Hochberg (default) \"bonferroni\": Bonferroni correction \"holm\": Holm's step-method max_lfc Numeric. Maximum absolute log2 fold change report. Larger values capped ±max_lfc. Default: 10 clusters Numeric vector factor. Sample cluster assignments robust variance estimation. Length must match number samples. Default: NULL parallel.cores Integer NULL. Number CPU cores parallel processing. NULL, uses available cores. Default: NULL","code":""},{"path":"https://caravagnalab.github.io/devil/reference/test_de.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Test for Differential Expression — test_de","text":"tibble columns: name Character. Gene identifiers input data pval Numeric. Raw p-values statistical tests adj_pval Numeric. Adjusted p-values multiple testing correction lfc Numeric. Log2 fold changes, capped ±max_lfc","code":""},{"path":"https://caravagnalab.github.io/devil/reference/test_de.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Test for Differential Expression — test_de","text":"function implements following analysis pipeline: Calculates log fold changes using contrast vectors/matrices Computes test statistics using either standard robust variance estimation Calculates p-values using t-distribution appropriate degrees freedom Adjusts p-values multiple testing Applies fold change thresholding variance estimation can account sample clustering (e.g., multiple samples patient) using sandwich estimator robust inference.","code":""},{"path":"https://caravagnalab.github.io/devil/reference/test_de.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Test for Differential Expression — test_de","text":"","code":"if (FALSE) { # \\dontrun{ # Basic differential expression test results <- test_de(fit, contrast = c(0, 1, -1))  # With sample clustering and stricter fold change threshold results <- test_de(fit, contrast = c(0, 1, -1),                    clusters = patient_ids,                    max_lfc = 5) } # }"}]
